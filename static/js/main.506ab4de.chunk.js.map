{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","aria-checked","htmlFor","style","height","width","name","onChange","changeColor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","event","target","rows","textInBox","showAlert","backgroundColor","btnColor","SpeechSynthesisUtterance","window","speechSynthesis","speak","res","match","join","document","getElementById","select","navigator","clipboard","writeText","trim","split","length","Math","ceil","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","setBtnColor","message","setTimeout","body","inputColor","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.506ab4de.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return word.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    props.alert && <div>\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show text-center`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} shadow`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\"><b>{props.title}</b></Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\"><b>{props.title}</b></a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to='/contact'>Contact</Link>\r\n              </li> */}\r\n              <li className={`nav-item text-light mt-2 ms-2 text-${((props.mode === 'light')?'dark':'light')}`}>\r\n                <input className=\"form-check-input me-1\" onClick={props.toggleMode} aria-checked='false' type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{((props.mode === 'light')?'Dark':'Light')} Mode</label>\r\n              </li>\r\n              <li className={`nav-item text-light mt-2 ms-2 text-${((props.mode === 'light')?'dark':'light')}`}>\r\n                <input className=\"form-input rounded-circle p-0 border-0 me-1\" style={{height:'20px', width: '20px'}} type=\"color\" name=\"color-picker\" onChange={props.changeColor} id=\"colorPicker\" />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Change Button Color</label>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className={`form-check form-switch text-light text-${((props.mode === 'light')?'dark':'light')}`}>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\n\r\n// defining property types here, to avoid errors  OR   .isRequired for required props\r\n\r\nNavbar.propTypes = {\r\n  title : PropTypes.string.isRequired,\r\n}\r\n\r\n// default values of properties\r\n\r\n// Navbar.defaultProps = {\r\n//   title : \"Set Title Here!\"\r\n// }","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // HOOKS\r\n    // text : stateVariable, setText : func to change text\r\n    const [text, setText] = useState('');\r\n\r\n    // to change the text to upperCase\r\n    const upperCase = ()=>{\r\n        let textInBox = text.toUpperCase();\r\n        setText(textInBox);\r\n        props.showAlert('Text converted to upper case!', 'success');\r\n    }\r\n\r\n    const lowerCase = ()=>{\r\n        let textInBox = text.toLowerCase();\r\n        setText(textInBox);\r\n        props.showAlert('Text converted to lower case!', 'success');\r\n    }\r\n\r\n    // speak functionality\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    //to extract only the numbers in the text:\r\n    const handleNumExtract =()=>{\r\n        const regex = /[0-9/ /]/g;\r\n        const digits = text.match(regex);\r\n        const res = digits.join('');\r\n        setText(res);\r\n        props.showAlert('All Numbers has been extracted!', 'success');\r\n    };\r\n\r\n    // Copy Text\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('Text copied!', 'success');\r\n\r\n    }\r\n\r\n    // to handle the change in state of text\r\n    const onChangeHandler = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n  return (\r\n      <>\r\n        <div>\r\n            <h1 className={`text-${((props.mode === 'light')?'dark':'light')}`}>{props.heading}</h1>\r\n            <div className={`mb-3 my-3 text-${((props.mode === 'light')?'dark':'light')}`}>\r\n                <textarea className={`form-control text-${((props.mode === 'light')?'dark':'light')} bg-${props.mode}`} value={text} onChange={onChangeHandler} id=\"myBox\" rows={props.rows}></textarea>\r\n                <button className=\"btn btn-primary border-0 my-3\" onClick={upperCase} style={{backgroundColor:props.btnColor}}>Convert to Upper-Case</button>\r\n                <button className=\"btn btn-primary border-0 my-3 ms-3\" onClick={lowerCase} style={{backgroundColor:props.btnColor}}>Convert to Lower-Case</button>\r\n                <button type=\"submit\" onClick={speak} className=\"btn btn-primary border-0 mx-2 my-2\" style={{backgroundColor:props.btnColor}}>Speak</button>\r\n                <button type='submit' onClick={handleNumExtract} className=\"btn btn-primary border-0\" style={{backgroundColor:props.btnColor}}>Extract Nums</button>\r\n                <button type='submit' onClick={handleCopy} className=\"btn btn-primary border-0 ms-2\" style={{backgroundColor:props.btnColor}}>Copy Text</button>\r\n            </div>\r\n        </div>\r\n        <div className={`container text-${((props.mode === 'light')?'dark':'light')}`}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.trim().split(' ').length} words and {text.length} characters</p>\r\n            <p>{Math.ceil(0.008 * text.trim().split(' ').length)} minutes to read this text</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter you text to preview\"}</p>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //  dark mode variable\n  const [alert, setAlert] = useState(null);  // alert as an object\n  const [btnColor, setBtnColor] = useState('#000000'); // change color of buttons\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n    setAlert(null);\n  }, 2000);\n  }\n\n  const toggleMode= ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor= '#353535';\n      showAlert('Dark Mode has been set', 'success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert('Light Mode has been set', 'success');\n    }\n  }\n\n  const changeColor = (value)=>{\n    let inputColor= document.getElementById('colorPicker');\n    setBtnColor(inputColor.value);\n  }\n\n  return (\n    // JSX Code Starts Here\n    // JSX Fragment\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} changeColor={changeColor}/>\n      <Alert alert= {alert}/>\n      <div className=\"container mt-3\">\n        {/* <Routes> */}\n          {/* exact -- to match exact path specified*/}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" rows={5} mode={mode} btnColor={btnColor}/>\n          {/* <Route exact path='/' element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" rows={5} mode={mode} btnColor={btnColor}/>} /> */}\n          {/* <Route exact path='/about' element={<About />} /> */}\n          {/* <Route path='/contact' element={<Contact />} /> */}\n        {/* </Routes> */}\n      </div>\n     {/* </Router> */}\n    </>\n    // JSX Code Ends Here\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}